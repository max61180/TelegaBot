import os
import sqlite3
import asyncio
from telegram import Update, Bot
from telegram.ext import (
    Application,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from fastapi import FastAPI
import uvicorn

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ["BOT_TOKEN"]
ADMIN_ID = int(os.environ["ADMIN_ID"])
PORT = int(os.environ.get("PORT", 8000))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

@app.get("/")
def health_check():
    return {"status": "Bot is running"}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('chats.db', check_same_thread=False)
    conn.execute('''CREATE TABLE IF NOT EXISTS user_chats
                 (user_id TEXT PRIMARY KEY, chat_id TEXT)''')
    return conn

conn = init_db()

async def handle_accept_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç: "accept_USER123")
        user_id = query.data.split('_')[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å user_id –∏ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ (–∫—É–¥–∞ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É)
        conn.execute("INSERT OR REPLACE INTO user_chats VALUES (?, ?)", 
                    (user_id, str(query.message.chat.id)))
        conn.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await query.answer()
        await context.bot.send_message(
            chat_id=query.message.chat.id,
            text=f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ —á–∞—Ç —Å {user_id}\n–¢–µ–ø–µ—Ä—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –º–µ—Ö–∞–Ω–∏–∑–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_accept_callback: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —á–∞—Ç–∞")

async def handle_new_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not update.message or not update.message.text:
            return
            
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
        if update.message.from_user.id == context.bot.id:
            return
            
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (üë§ user-123e4567)
        if 'üë§' in update.message.text:
            user_id = update.message.text.split('üë§ ')[1].split(':')[0]
            
            # –ò—â–µ–º chat_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cursor = conn.execute(
                "SELECT chat_id FROM user_chats WHERE user_id = ?", 
                (user_id,)
            )
            chat_data = cursor.fetchone()
            
            if chat_data:
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —á–∞—Ç
                await context.bot.send_message(
                    chat_id=int(chat_data[0]),
                    text=update.message.text
                )
            else:
                # –ï—Å–ª–∏ —á–∞—Ç –µ—â–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏–Ω—è—Ç—å
                await context.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —á–∞—Ç–∞ –æ—Ç {user_id}:\n\n{update.message.text}",
                    reply_markup={
                        "inline_keyboard": [[
                            {
                                "text": "‚úÖ –ü—Ä–∏–Ω—è—Ç—å —á–∞—Ç",
                                "callback_data": f"accept_{user_id}"
                            }
                        ]]
                    }
                )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_new_message: {e}")

async def run_bot():
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CallbackQueryHandler(
        handle_accept_callback, 
        pattern="^accept_"
    ))
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        handle_new_message
    ))
    
    await application.initialize()
    await application.start()
    print(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ê–¥–º–∏–Ω: {ADMIN_ID}")
    
    while True:
        await asyncio.sleep(3600)

async def main():
    # HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
    server = threading.Thread(
        target=uvicorn.run,
        kwargs={"app": app, "host": "0.0.0.0", "port": PORT},
        daemon=True
    )
    server.start()
    
    await run_bot()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"üö® FATAL ERROR: {e}")
        exit(1)
