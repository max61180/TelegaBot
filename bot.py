import os
import sqlite3
import asyncio
import threading
from fastapi import FastAPI
import uvicorn
from telegram import Update
from telegram.ext import Application, MessageHandler, ContextTypes, filters

# =============================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø (–¢–û–õ–¨–ö–û –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø)
# =============================================
BOT_TOKEN = os.environ["BOT_TOKEN"]  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
ADMIN_ID = int(os.environ["ADMIN_ID"])  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
PORT = 8000
# =============================================

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
assert BOT_TOKEN != "", "BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!"
assert ADMIN_ID != 0, "ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω!"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

@app.get("/")
def health_check():
    return {"status": "Secure bot active", "admin": ADMIN_ID}

async def create_user_chat(bot, user_id: str):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º"""
    chat = await bot.create_chat(
        title=f"–ö–ª–∏–µ–Ω—Ç {user_id[:6]}...",
        user_ids=[ADMIN_ID]
    )
    conn.execute("INSERT OR REPLACE INTO user_chats VALUES (?, ?)", (user_id, chat.id))
    conn.commit()
    return chat.id

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        if not update.message or not update.message.text:
            return

        text = update.message.text
        if 'üë§' in text:
            user_id = text.split('üë§ ')[1].split(':')[0]
            chat_id = conn.execute(
                "SELECT chat_id FROM user_chats WHERE user_id = ?", 
                (user_id,)
            ).fetchone()

            if not chat_id:
                chat_id = await create_user_chat(context.bot, user_id)
            else:
                chat_id = chat_id[0]

            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode="Markdown"
            )
    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞: {e}")

async def run_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    await app.initialize()
    await app.start()
    print(f"üîê –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è admin_id: {ADMIN_ID}")
    
    while True:
        await asyncio.sleep(3600)

async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    # HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
    server = threading.Thread(
        target=uvicorn.run,
        kwargs={"app": app, "host": "0.0.0.0", "port": PORT},
        daemon=True
    )
    server.start()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
    await run_bot()

if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    conn = sqlite3.connect('chats.db', check_same_thread=False)
    conn.execute('''CREATE TABLE IF NOT EXISTS user_chats
                 (user_id TEXT PRIMARY KEY, chat_id TEXT)''')
    
    try:
        asyncio.run(main())
    except KeyError as e:
        print(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {e}")
        exit(1)
