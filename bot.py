from telegram import Update
from telegram.ext import (
    Application,
    MessageHandler,
    ContextTypes,
    filters
)
import sqlite3
import os
import asyncio

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î (—Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π)
conn = sqlite3.connect('chats.db', check_same_thread=False)
conn.execute('''CREATE TABLE IF NOT EXISTS user_chats
             (user_id TEXT PRIMARY KEY, chat_id TEXT)''')

async def create_user_chat(bot, user_id: str):
    chat = await bot.create_chat(
        title=f"–ö–ª–∏–µ–Ω—Ç {user_id}",
        user_ids=[ADMIN_ID]  # –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –∞–¥–º–∏–Ω–∞ —Å—Ä–∞–∑—É
    )
    conn.execute("INSERT OR REPLACE INTO user_chats VALUES (?, ?)", (user_id, chat.id))
    conn.commit()
    return chat.id

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text
        if 'üë§' in text:
            user_id = text.split('üë§ ')[1].split(':')[0]
            cursor = conn.execute("SELECT chat_id FROM user_chats WHERE user_id = ?", (user_id,))
            chat_id = cursor.fetchone()
            
            if not chat_id:
                chat_id = await create_user_chat(context.bot, user_id)
            else:
                chat_id = chat_id[0]
            
            await context.bot.send_message(
                chat_id=chat_id,
                text=text
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

async def main():
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await application.initialize()
    await application.start()
    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())
