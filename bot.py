import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv('BOT_TOKEN', '7768583912:AAEJ51jQ5ayuC3yuclzpSbFEbnfM4gz5rr8')
ADMIN_ID = int(os.getenv('ADMIN_ID', '1642268174'))

class ChatManager:
    def __init__(self):
        self.active_chats = {}  # {user_id: chat_id}

    async def create_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.data.split('_')[1]
        
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É (–±–æ—Ç + –∞–¥–º–∏–Ω)
            chat = await context.bot.create_new_chat_invite_link(
                title=f"–ß–∞—Ç —Å {user_id}",
                user_ids=[ADMIN_ID]
            )
            
            self.active_chats[user_id] = chat.chat.id
            invite_link = await chat.chat.export_invite_link()
            
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üîπ –ù–æ–≤—ã–π —á–∞—Ç —Å {user_id}\n–°—Å—ã–ª–∫–∞: {invite_link}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", url=invite_link)
                ]])
            )
            
            await query.edit_message_text(
                text="‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω! –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ.",
                reply_markup=None
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞: {e}")
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç")

    async def forward_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç"""
        if 'üë§' in update.message.text:
            user_id = update.message.text.split('üë§ ')[1].split(':')[0]
            
            if user_id in self.active_chats:
                await context.bot.send_message(
                    chat_id=self.active_chats[user_id],
                    text=update.message.text
                )

def main():
    chat_manager = ChatManager()
    
    # –í–∞–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Render:
    app = ApplicationBuilder() \
        .token(BOT_TOKEN) \
        .concurrent_updates(True) \  # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        .http_version('1.1') \  # –°—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è HTTP
        .get_updates_http_version('1.1') \
        .build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CallbackQueryHandler(
        chat_manager.create_chat, 
        pattern="^newchat_"
    ))
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        chat_manager.forward_message
    ))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling (Render-compatible)")
    app.run_polling(
        allowed_updates=Update.ALL_TYPES,
        close_loop=False,  # –ö—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è Render!
        stop_signals=[]    # –û—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    )

if __name__ == '__main__':
    main()
