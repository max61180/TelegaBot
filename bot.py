import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ò –ó–ù–ê–ß–ï–ù–ò–Ø!)
BOT_TOKEN = os.getenv('BOT_TOKEN', '7768583912:AAEJ51jQ5ayuC3yuclzpSbFEbnfM4gz5rr8')
ADMIN_ID = int(os.getenv('ADMIN_ID', '1642268174'))

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
active_chats = {}  # –§–æ—Ä–º–∞—Ç: {user_id: chat_id}

async def start_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–û—Ç–≤–µ—Ç–∏—Ç—å'"""
    query = update.callback_query
    await query.answer()

    try:
        user_id = query.data.split('_')[-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ callback_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        active_chats[user_id] = query.message.chat.id
        
        # –ú–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            text=f"‚úÖ –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n\n"
                 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîí –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f"close_{user_id}")
            ]])
        )
        
        logger.info(f"–ß–∞—Ç —Å {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_chat: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–∞—Ç–∞")

async def close_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.data.split('_')[-1]
    
    if user_id in active_chats:
        del active_chats[user_id]
    
    await query.edit_message_text(
        text=f"‚ùå –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –∑–∞–∫—Ä—ã—Ç",
        reply_markup=None
    )
    logger.info(f"–ß–∞—Ç —Å {user_id} –∑–∞–∫—Ä—ã—Ç")

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not update.message or not update.message.text:
        return
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
    if update.message.from_user.is_bot:
        return
    
    # –°–æ–æ–±—â–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ "üë§ user-123: —Ç–µ–∫—Å—Ç"
    if 'üë§' in update.message.text:
        user_id = update.message.text.split('üë§ ')[1].split(':')[0]
        
        # –ï—Å–ª–∏ —á–∞—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω - –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if user_id in active_chats:
            await context.bot.send_message(
                chat_id=active_chats[user_id],
                text=update.message.text
            )
            return
    
    # –î–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
    keyboard = [[InlineKeyboardButton("‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"start_{user_id}")]]
    
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=update.message.text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if update.message.chat.id != ADMIN_ID:
        return
    
    # –ò—â–µ–º user_id –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    user_id = next((uid for uid, chat_id in active_chats.items() 
                   if chat_id == update.message.chat.id), None)
    
    if user_id:
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∏–º–∏—Ç–∞—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –º–µ—Ö–∞–Ω–∏–∑–º —Å–≤—è–∑–∏)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {user_id}: {update.message.text}")
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –∏–ª–∏ –¥—Ä—É–≥–æ–π –º–µ—Ö–∞–Ω–∏–∑–º
    else:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —á–∞—Ç –∫–Ω–æ–ø–∫–æ–π '–û—Ç–≤–µ—Ç–∏—Ç—å'")

def main():
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = ApplicationBuilder().token(BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(CallbackQueryHandler(start_chat, pattern="^start_"))
        app.add_handler(CallbackQueryHandler(close_chat, pattern="^close_"))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_message))
        app.add_handler(MessageHandler(filters.TEXT & filters.Chat(ADMIN_ID), handle_admin_message))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        app.run_polling()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
