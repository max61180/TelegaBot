import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ò –ó–ù–ê–ß–ï–ù–ò–Ø!)
BOT_TOKEN = os.getenv('BOT_TOKEN', '7768583912:AAEJ51jQ5ayuC3yuclzpSbFEbnfM4gz5rr8')
ADMIN_ID = int(os.getenv('ADMIN_ID', '1642268174'))

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —á–∞—Ç–æ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ë–î)
active_chats = {}

async def start_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û—Ç–≤–µ—Ç–∏—Ç—å'"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.data.split('_')[-1]
    active_chats[user_id] = query.message.chat.id
    
    await query.edit_message_text(
        text=f"‚úÖ –ß–∞—Ç —Å {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close_{user_id}")
        ]])
    )

async def close_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ó–∞–∫—Ä—ã—Ç—å'"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.data.split('_')[-1]
    active_chats.pop(user_id, None)
    
    await query.edit_message_text(f"‚ùå –ß–∞—Ç —Å {user_id} –∑–∞–∫—Ä—ã—Ç")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.message or not update.message.text:
        return

    # –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if 'üë§' in update.message.text:
        user_id = update.message.text.split('üë§ ')[1].split(':')[0]
        
        if user_id in active_chats:
            await context.bot.send_message(
                chat_id=active_chats[user_id],
                text=update.message.text
            )
            return

        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=update.message.text,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"start_{user_id}")
            ]])
        )

def main():
    try:
        # –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ persistence, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏
        app = ApplicationBuilder() \
            .token(BOT_TOKEN) \
            .concurrent_updates(True) \  # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            .build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        app.add_handler(CallbackQueryHandler(start_chat, pattern="^start_"))
        app.add_handler(CallbackQueryHandler(close_chat, pattern="^close_"))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling...")
        app.run_polling(
            allowed_updates=Update.ALL_TYPES,
            close_loop=False  # –í–∞–∂–Ω–æ –¥–ª—è Render.com
        )
        
    except Exception as e:
        logger.error(f"Fatal error: {e}")

if __name__ == '__main__':
    main()
