import os
import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv('BOT_TOKEN', '7768583912:AAEJ51jQ5ayuC3yuclzpSbFEbnfM4gz5rr8')
ADMIN_ID = int(os.getenv('ADMIN_ID', '1642268174'))

class ChatManager:
    def __init__(self):
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ: user_id -> group_id
        self.active_chats = {}
        self.lock = asyncio.Lock()

    async def handle_start_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç'"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.data.split('_')[1]
        
        try:
            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞.\n\n"
                     "1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –≤ Telegram\n"
                     "2. –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É\n"
                     "3. –ü–æ–ª—É—á–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã —Å –ø–æ–º–æ—â—å—é @RawDataBot\n"
                     "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: /setgroup_{user_id} [ID_–≥—Ä—É–ø–ø—ã]\n"
                     f"–ü—Ä–∏–º–µ—Ä: <code>/setgroup_{user_id} -1001234567890</code>",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", url="tg://create")
                ]])
            )
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await query.edit_message_text(
                text="‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –ø–æ—Å–ª–µ –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è.",
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_set_group(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /setgroup_user123"""
        if update.message.from_user.id != ADMIN_ID:
            return
            
        text = update.message.text
        if not text.startswith('/setgroup_'):
            return
            
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏ group_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            parts = text.split('_', 2)
            user_id = parts[1]
            group_id = parts[2].strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å group_id
            if not group_id.startswith('-100'):
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥—Ä—É–ø–ø—ã")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å (—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π)
            async with self.lock:
                self.active_chats[user_id] = group_id
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await update.message.reply_text(
                f"‚úÖ –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n"
                f"ID –≥—Ä—É–ø–ø—ã: {group_id}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –±—ã —É –Ω–∞—Å –±—ã–ª –µ–≥–æ chat_id, –Ω–æ —É –Ω–∞—Å –Ω–µ—Ç)
            # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–µ–±-—á–∞—Ç —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π –º–µ—Ö–∞–Ω–∏–∑–º (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
            
        except (IndexError, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã: {e}")
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "<code>/setgroup_&lt;user_id&gt; &lt;group_id&gt;</code>\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/setgroup_user-abc123 -1001234567890</code>",
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")

    async def forward_to_group(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É"""
        if not update.message or not update.message.text:
            return
            
        text = update.message.text
        if 'üë§' not in text:
            return
            
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            user_id = text.split('üë§ ')[1].split(':')[0]
            
            # –ò—â–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with self.lock:
                group_id = self.active_chats.get(user_id)
            
            if group_id:
                await context.bot.send_message(
                    chat_id=group_id,
                    text=text
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")

    async def handle_new_group_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –≤–µ–±-—á–∞—Ç
        pass

def main():
    chat_manager = ChatManager()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    app = Application.builder().token(BOT_TOKEN).concurrent_updates(True).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CallbackQueryHandler(chat_manager.handle_start_chat, pattern="^newchat_"))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^/setgroup_'), chat_manager.handle_set_group))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat_manager.forward_to_group))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, chat_manager.handle_new_group_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling(
        allowed_updates=Update.ALL_TYPES,
        close_loop=False,
        stop_signals=[],
        drop_pending_updates=True
    )

if __name__ == '__main__':
    main()
