import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ò –ó–ù–ê–ß–ï–ù–ò–Ø!)
BOT_TOKEN = os.getenv('BOT_TOKEN', '7768583912:AAEJ51jQ5ayuC3yuclzpSbFEbnfM4gz5rr8')
ADMIN_ID = int(os.getenv('ADMIN_ID', '1642268174'))

class ChatManager:
    def __init__(self):
        self.active_chats = {}  # {user_id: chat_id}

    async def start_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û—Ç–≤–µ—Ç–∏—Ç—å'"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.data.split('_')[-1]
        self.active_chats[user_id] = query.message.chat.id
        
        await query.edit_message_text(
            text=f"‚úÖ –ß–∞—Ç —Å {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close_{user_id}")
            ]])
        )

    async def close_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ó–∞–∫—Ä—ã—Ç—å'"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.data.split('_')[-1]
        self.active_chats.pop(user_id, None)
        await query.edit_message_text(f"‚ùå –ß–∞—Ç —Å {user_id} –∑–∞–∫—Ä—ã—Ç")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not update.message or not update.message.text:
            return

        if 'üë§' in update.message.text:
            user_id = update.message.text.split('üë§ ')[1].split(':')[0]
            
            if user_id in self.active_chats:
                await context.bot.send_message(
                    chat_id=self.active_chats[user_id],
                    text=update.message.text
                )
            else:
                await context.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=update.message.text,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"start_{user_id}")
                    ]])
                )

def main():
    chat_manager = ChatManager()
    
    try:
        app = ApplicationBuilder() \
            .token(BOT_TOKEN) \
            .concurrent_updates(True) \
            .build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        app.add_handler(CallbackQueryHandler(chat_manager.start_chat, pattern="^start_"))
        app.add_handler(CallbackQueryHandler(chat_manager.close_chat, pattern="^close_"))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat_manager.handle_message))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (—Ä–µ–∂–∏–º polling)...")
        app.run_polling(
            allowed_updates=Update.ALL_TYPES,
            close_loop=False,
            stop_signals=None  # –í–∞–∂–Ω–æ –¥–ª—è Render.com
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
