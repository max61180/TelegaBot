import os
import sqlite3
import asyncio
import threading
from telegram import Update, Bot
from telegram.ext import Application, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from fastapi import FastAPI
import uvicorn

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ["BOT_TOKEN"]
ADMIN_ID = int(os.environ["ADMIN_ID"])
PORT = int(os.environ.get("PORT", 8000))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
app = FastAPI()
conn = sqlite3.connect('chats.db', check_same_thread=False)
conn.execute('''CREATE TABLE IF NOT EXISTS user_chats
             (user_id TEXT PRIMARY KEY, chat_id TEXT, admin_chat_id TEXT)''')

@app.get("/")
def health_check():
    return {"status": "Bot is running"}

async def accept_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        user_id = query.data.split('_')[1]
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –º–µ–∂–¥—É –±–æ—Ç–æ–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        chat = await context.bot.create_chat_invite_link(
            chat_id=ADMIN_ID,
            name=f"–ß–∞—Ç —Å {user_id}"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        conn.execute("INSERT OR REPLACE INTO user_chats VALUES (?, ?, ?)",
                    (user_id, str(chat.chat.id), str(query.message.chat.id)))
        conn.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await query.answer("–ß–∞—Ç —Å–æ–∑–¥–∞–Ω!")
        await context.bot.send_message(
            chat_id=chat.chat.id,
            text=f"üîπ –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} —Å–æ–∑–¥–∞–Ω\n\n"
                 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.send_message(
            chat_id=int(ADMIN_ID),
            text=f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ –≤ –Ω–æ–≤–æ–º —á–∞—Ç–µ"
        )
        
    except Exception as e:
        print(f"Error in accept_chat: {e}")
        await query.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not update.message or not update.message.text:
            return
            
        # –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if 'üë§' in update.message.text:
            user_id = update.message.text.split('üë§ ')[1].split(':')[0]
            data = conn.execute(
                "SELECT chat_id, admin_chat_id FROM user_chats WHERE user_id = ?",
                (user_id,)
            ).fetchone()
            
            if data:
                # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á–∞—Ç
                await context.bot.send_message(
                    chat_id=int(data[0]),
                    text=update.message.text
                )
            else:
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç
                await context.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {user_id}:\n{update.message.text}",
                    reply_markup={
                        "inline_keyboard": [[
                            {"text": "‚úÖ –°–æ–∑–¥–∞—Ç—å —á–∞—Ç", "callback_data": f"accept_{user_id}"}
                        ]]
                    }
                )
                
    except Exception as e:
        print(f"Message handling error: {e}")

async def run_bot():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CallbackQueryHandler(accept_chat, pattern="^accept_"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    await application.initialize()
    await application.start()
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

async def main():
    server = threading.Thread(
        target=uvicorn.run,
        kwargs={"app": app, "host": "0.0.0.0", "port": PORT},
        daemon=True
    )
    server.start()
    await run_bot()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞: {e}")
        exit(1)
