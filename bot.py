import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv('BOT_TOKEN', '7768583912:AAEJ51jQ5ayuC3yuclzpSbFEbnfM4gz5rr8')
ADMIN_ID = int(os.getenv('ADMIN_ID', '1642268174'))

class ChatManager:
    def __init__(self):
        self.user_chats = {}  # {user_id: chat_id}

    async def create_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —á–∞—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.data.split('_')[1]
        
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç –±–æ—Ç–∞ —Å –∞–¥–º–∏–Ω–æ–º)
            chat = await context.bot.create_chat_invite_link(
                chat_id=ADMIN_ID,
                name=f"–ß–∞—Ç —Å {user_id}"
            )
            
            self.user_chats[user_id] = chat.invite_link
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üîπ –ù–æ–≤—ã–π —á–∞—Ç —Å {user_id}\n"
                     f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É: {chat.invite_link}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", url=chat.invite_link)
                ]])
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await query.edit_message_text(
                text=f"‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω! –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è",
                reply_markup=None
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞")

    async def forward_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç"""
        if 'üë§' in update.message.text:
            user_id = update.message.text.split('üë§ ')[1].split(':')[0]
            
            if user_id in self.user_chats:
                await context.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=update.message.text,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å –≤ —á–∞—Ç–µ", url=self.user_chats[user_id])
                    ]])
                )

def main():
    chat_manager = ChatManager()
    
    app = ApplicationBuilder() \
        .token(BOT_TOKEN) \
        .build()

    app.add_handler(CallbackQueryHandler(chat_manager.create_chat, pattern="^create_"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat_manager.forward_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()
